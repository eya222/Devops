pipeline {
    agent any

    environment {
        SONARQUBE_URL = 'http://193.95.57.13:9000'
        NEXUS_URL = 'http://193.95.57.13:8081/repository/maven-releases/'
        registry = "nietzsche11/devops"           // Docker registry address
        registryCredential = 'docker'            // Jenkins credential ID for Docker Hub
        dockerImage = 'tpachat'                  // Docker image name
    }

    stages {
        stage("Cloning Project") {
            steps {
                git branch: 'main', url: 'https://github.com/eya222/Devops.git', credentialsId: 'github'
                echo 'Checkout stage completed'
            }
        }

        stage("Build and Analyze") {
            steps {
                sh 'mvn clean package -DskipTests'  // Clean, build (skip tests)

                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONARQUBE_TOKEN')]) {
                    sh """
                        mvn sonar:sonar \
                            -Dsonar.projectKey=Devops \
                            -Dsonar.host.url=${SONARQUBE_URL} \
                            -Dsonar.login=$SONARQUBE_TOKEN \
                            -Dsonar.sources=src/main/java \
                            -Dsonar.tests=src/test/java
                    """
                }
                echo 'SonarQube analysis completed'
            }
        }

        stage("Nexus Deploy") {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'nexus', usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
                        sh """
                            mvn deploy:deploy-file \
                                -DgroupId=tn.esprit \
                                -DartifactId=tpAchatProject \
                                -Dversion=1.0 \
                                -Dpackaging=jar \
                                -Dfile=target/tpAchatProject-1.0.jar \
                                -DrepositoryId=deploymentRepo \
                                -Durl=${NEXUS_URL} \
                                -Dusername=$NEXUS_USER \
                                -Dpassword=$NEXUS_PASS \
                                -DgeneratePom=true 
                        """
                        echo 'Nexus deployment completed'
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Log in to Docker registry using credentials stored in Jenkins
                    docker.withRegistry('https://index.docker.io/v1/', registryCredential) {
                        // Build the Docker image
                        dockerImage = docker.build("${registry}/${dockerImage}:${BUILD_NUMBER}")
                    }
                }
            }
        }

        stage('Deploy Docker Image') {
            steps {
                script {
                    // Push the Docker image to the registry
                    docker.withRegistry('https://index.docker.io/v1/', registryCredential) {
                        dockerImage.push()
                    }
                }
            }
        }

        stage('Clean up') {
            steps {
                sh "docker rmi ${registry}/${dockerImage}:${BUILD_NUMBER}"
            }
        }
    }

    post {
        success {
            echo 'Build, SonarQube analysis, Nexus deployment, and Docker image deployment completed successfully'
        }
        failure {
            echo 'Pipeline failed. Check logs for errors.'
        }
    }
}
